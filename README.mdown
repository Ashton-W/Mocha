# Mocha
### Objective-C / JavaScript Bridge


Mocha is a runtime that bridges JavaScript to Objective-C. It is built on top of JavaScriptCore, the component of WebKit responsible for parsing and evaluating JavaScript code, and BridgeSupport, which enables libraries to expose the definition of their C structures and functions for use at run-time, as opposed to compile-time.


## Usage

Instances of the `Mocha` class is the representation of a runtime. A runtime can be used either through shared instance (returned from `-sharedRuntime`) or by creating an instance by calling `-init` or `-initWithGlobalContext:`.


## Values and Boxed Objects

When arguments are passed between the Objective-C and JavaScript sides of the bridge they may be implicitly converted to an appropriate type counterpart or boxed within an opaque proxy object. The following type conventions are in effect when moving between each side of the bridge:

### Objective-C to JavaScript
- `nil` is converted to `null`
- `NSNull` is converted to `null`
- `MOUndefined` is converted to `undefined`
- `char*` is converted to `String`
- **Objective-C methods** are converted to `MOMethod`, and are callable
- **C structs** are boxed within an opaque `Object` type, allowing direct access to members in a dictionary-like manner.
- **C numeric primitives** (`int`, `long`, `short`, `char`, `float`, `double`, etc.) are converted to `Number`
- `bool` is converted to `Boolean`
- **C Functions** are boxed within an opaque `Object` type, and are callable
- **Pointers** are boxed within an opaque `Object` type
- **All other Objective-C objects** are boxed within an opaque `Object` type. This type can be converted to `String` or `Number` from within JavaScript. `NSString` instances will convert to `String` appropriately. `NSNumber` instances will convert to `Number` appropriately. All other conversions will use the -description method of the `NSObject` subclass.

Note: `BOOL`, unlike `bool`, is converted to `Number`, as `BOOL` is typedef'd as an `unsigned char` in Objective-C.

### JavaScript to Objective-C
- `String` is converted to `NSString` or `char*`, depending on context
- `Number` is converted to `NSNumber` or a **C numeric primitive**, depending on context
- `Boolean` is converted to `NSNumber` or `bool`, depending on context
- `Array` is converted to `NSArray`
- `Object` is converted to `NSDictionary`
- `null` is converted to `nil` (when bare) or `NSNull` (when placed in a container)
- `undefined` is converted to `MOUndefined`
- **All boxed types** are unboxed


## Exposing Objective-C methods

By default, all methods and properties of an Objective-C object crossing the bridge are available to be invoked. If you wish to specifically exclude methods from invocation on the JavaScript side of the bridge, use the `+isSelectorExcludedFromMochaScript:` method. Objects implementing this method can return `YES` for any selector that should not be invoked from the bridge.

#### Example:
<pre>
@implementation MyClass
â€¦

+ (BOOL)isSelectorExcludedFromMochaScript:(SEL)selector {
    if (selector == @selector(someMethod)) {
        return YES;
    }
    return [super isSelectorExcludedFromMochaScript:selector];
}

@end
</pre>


## Globals

### Global Objects

Arbitrary Objective-C objects and methods can be exposed as global objects to the runtime without needing to declare BridgeSupport information. The `Mocha` class is a fully Key-Value Coding compliant container for just this purpose. Calling `-valueForKey:` and `-setValue:forKey:` exposes an object to the runtime, assuming it can be boxed as an appropriate JavaScript type (see above).

#### Example:
<pre>
Mocha *runtime = [Mocha sharedRuntime];
MyClass *object = [[[MyClass alloc] init];
[runtime setValue:object forKey:@"MyObject"];
</pre>
<pre>
var result = MyObject.someMethod();
</pre>

### Global Functions

To expose arbitrary global functions to the runtime, use the `MOMethod` class. Instances of the class keep reference to a target object and Objective-C selector, which can be invoked dynamically by the runtime whenever the method is called on the JavaScript side of the bridge. Like all other objects, methods can be exposed using the `-valueForKey:` and `-setValue:forKey:` methods of the `Mocha` class.

#### Example:
<pre>
Mocha *runtime = [Mocha sharedRuntime];
MOMethod *method = [MOMethod methodWithTarget:myObject selector:@selector(someMethod)];
[runtime setValue:method forKey:@"someMethod"];
</pre>
<pre>
var result = someMethod();
</pre>


## Object Subscripting

Objects that support indexed-access (acting as array-types) or keyed-access (acting as dictionary-types) can support the JavaScript subscripting syntax for accessing values.

### Indexed Subscripting

Implementing `-objectForIndexedSubscript:` allows an object can use the `object[idx]` syntax for read-only access to values. For read-write access, you should also implement the `-setObject:forIndexedSubscript:` method. Both of these methods are declared within an informal protocol defined in MochaRuntime.h.

`NSArray` and `NSMutableArray` automatically adopt this syntax (through a swizzled category on 10.7 and before, or through automatically supporting the Objective-C indexed subscripting syntax on 10.8+).

### Keyed Subscripting

Implementing `-objectForKeyedSubscript:` allows an object can use the `object['key']` syntax for read-only access to values. For read-write access, you should also implement the `-setObject:forKeyedSubscript:` method. Both of these methods are declared within an informal protocol defined in MochaRuntime.h.

`NSDictionary` and `NSMutableDictionary` automatically adopt this syntax (through a swizzled category on 10.7 and before, or through automatically supporting the Objective-C keyed subscripting syntax on 10.8+).


## moc: The Mocha Interpreter

`moc` is a simple command-line interpreter for debugging and testing with Mocha. It is similar to `jsc`, provided as part of JavaScriptCore.


## Code Usage

Mocha utilizes some code and ideas from both PyObjC (http://pyobjc.sourceforge.net/, MIT license) and JSCocoa (http://inexdo.com/JSCocoa, MIT license).
Implementation files are marked appropriately when code it utilized in complete or near-complete duplicate from these awesome projects.


## License

Copyright 2012 Logan Collins

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.